4rth on day 4
Ones and zeroes 
Here use dp
Create a matrix of size m+1 n+1
then count 0s and 1s
then in a nested for loop calculate dp[i][j]
then return the dp[m][n]
class Solution {
public:

    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        for (const auto& str : strs) {
            int zeros = count(str.begin(), str.end(), '0');
            int ones = count(str.begin(), str.end(), '1');
            for (int i = m; i >= zeros; --i) {
                for (int j = n; j >= ones; --j) {
                    dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1);
                }
            }
        }
        
        return dp[m][n];
    }
};
